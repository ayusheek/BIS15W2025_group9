<<<<<<< HEAD
theme(plot.title = element_text(size = 16))
})
}
shinyApp(ui, server)
=======
y = "Average Revenue (INR)"
)
genre_popularity_data <- bollywood_data %>%
filter(release_period == "holiday") %>%
drop_na(genre, era) %>%
group_by(era, genre, .groups = 'keep') %>%
summarise(movie_count = n()) %>%
slice_max(movie_count, n = 1, by = era)
genre_popularity_data <- bollywood_eras %>%
filter(release_period == "holiday") %>%
drop_na(genre, era) %>%
group_by(era, genre, .groups = 'keep') %>%
summarise(movie_count = n()) %>%
slice_max(movie_count, n = 1, by = era)
genre_popularity_data <- bollywood_eras %>%
filter(release_period == "holiday") %>%
drop_na(genre, era) %>%
group_by(era, genre, .groups = 'keep') %>%
summarise(movie_count = n())
ggplot(genre_popularity_data, aes(x = genre, y = movie_count, fill = era)) +
geom_col() +
theme_minimal() +
labs(
title = "Most Popular Genre During Holiday Releases Across Eras",
x = "Genre",
y = "Number of Movies",
fill = "Era"
)
genre_popularity_data <- bollywood_eras %>%
filter(release_period == "holiday") %>%
drop_na(genre, era) %>%
group_by(era, genre, .groups = 'keep') %>%
summarise(movie_count = n())
ggplot(genre_popularity_data, aes(x = genre, y = movie_count, fill = era)) +
geom_col() +
theme(axis.text.x = element_text(angle = 60))
theme_minimal() +
labs(
title = "Most Popular Genre During Holiday Releases Across Eras",
x = "Genre",
y = "Number of Movies",
fill = "Era"
)
highest_revenue_star <- bollywood_data %>%
drop_na(lead_star, revenue_inr, era) %>%
group_by(era, lead_star, .groups = 'keep') %>%
summarise(total_revenue = sum(revenue_inr))
highest_revenue_star <- bollywood_eras %>%
drop_na(lead_star, revenue_inr, era) %>%
group_by(era, lead_star, .groups = 'keep') %>%
summarise(total_revenue = sum(revenue_inr))
ggplot(highest_revenue_star, aes(x = reorder(lead_star, total_revenue), y = total_revenue, fill = era)) +
geom_col() +
coord_flip() +
theme_minimal() +
labs(
title = "Revenue Generated by Lead Stars in Each Era",
x = "Lead Star",
y = "Total Revenue (INR)",
fill = "Era"
)
revenue_genre_era <- bollywood_data %>%
drop_na(genre, revenue_inr, era) %>%
group_by(era, genre, .groups = 'keep') %>%
summarise(avg_revenue = mean(revenue_inr))
revenue_genre_era <- bollywood_eras %>%
drop_na(genre, revenue_inr, era) %>%
group_by(era, genre, .groups = 'keep') %>%
summarise(avg_revenue = mean(revenue_inr))
ggplot(revenue_genre_era, aes(x = genre, y = avg_revenue, fill = genre)) +
geom_col() +
facet_wrap(~era) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(
title = "Revenue Distribution by Genre Across Eras",
x = "Genre",
y = "Average Revenue (INR)",
fill = "Genre"
)
music_director_hits <- bollywood_data %>%
filter(music_director %in% c("a.r. rehman", "pritam", "vishal - shekhar", "anu malik")) %>%
drop_na(music_director, hit_songs, era) %>%
group_by(era, music_director, .groups = 'keep') %>%
summarise(total_hits = sum(hit_songs))
music_director_hits <- bollywood_eras %>%
filter(music_director %in% c("a.r. rehman", "pritam", "vishal - shekhar", "anu malik")) %>%
drop_na(music_director, hit_songs, era) %>%
group_by(era, music_director, .groups = 'keep') %>%
summarise(total_hits = sum(hit_songs))
music_director_hits <- bollywood_eras %>%
filter(music_director %in% c("a.r. rehman", "pritam", "vishal - shekhar", "anu malik")) %>%
group_by(era, music_director, .groups = 'keep') %>%
summarise(total_hits = sum(hit_songs))
music_director_hits <- bollywood_eras %>%
filter(music_director %in% c("a.r. rehman", "pritam", "vishal - shekhar", "anu malik")) %>%
group_by(era, music_director, .groups = 'keep') %>%
summarise(total_hits = sum(hit_songs, na.rm = TRUE))
music_director_hit_flop <- bollywood_eras %>%
filter(music_director %in% c("a.r. rehman", "pritam", "vishal - shekhar", "anu malik")) %>%
group_by(era, music_director, .groups = 'keep') %>%
summarise(hit_flop_avg = mean(hit_flop, na.rm = TRUE))
ggplot(music_director_hit_flop, aes(x = reorder(music_director, hit_flop_avg), y = hit_flop_avg, fill = era)) +
geom_col(position = "dodge") +
theme_minimal() +
labs(
title = "Highest Hit-Flop Average by Music Directors Across Eras",
x = "Music Director",
y = "Hit-Flop Average",
fill = "Era"
)
bollywood_eras %>%
filter(!is.na(revenue_inr), !is.na(era)) %>%
ggplot(aes(x=era, y=revenue_inr, fill=era)) +
geom_boxplot(outlier.color="red", outlier.shape=16, alpha=0.7) +
theme_minimal() +
scale_fill_manual(values=c("#FF5733", "#33FF57")) +
labs(title="Revenue Distribution by Era", subtitle="Comparing old and new Bollywood movies",
x="Era", y="Revenue (INR)", fill="Era")
revenue_genre_era <- bollywood_eras %>%
drop_na(genre, revenue_inr, era) %>%
group_by(era, genre, .groups = 'keep') %>%
summarise(avg_revenue = mean(revenue_inr))
ggplot(revenue_genre_era, aes(x = genre, y = avg_revenue)) +
geom_col(fill="purple") +
facet_wrap(~era) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(
title = "Revenue Distribution by Genre Across Eras",
x = "Genre",
y = "Average Revenue (INR)",
fill = "Genre"
)
revenue_genre_era <- bollywood_eras %>%
drop_na(genre, revenue_inr, era) %>%
group_by(era, genre, .groups = 'keep') %>%
summarise(avg_revenue = mean(revenue_inr))
ggplot(revenue_genre_era, aes(x = genre, y = avg_revenue)) +
geom_col(fill="purple", color="black") +
facet_wrap(~era) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(
title = "Revenue Distribution by Genre Across Eras",
x = "Genre",
y = "Average Revenue (INR)",
fill = "Genre"
)
revenue_genre_era <- bollywood_eras %>%
drop_na(genre, revenue_inr, era) %>%
group_by(era, genre, .groups = 'keep') %>%
summarise(avg_revenue = mean(revenue_inr))
ggplot(revenue_genre_era, aes(x = genre, y = avg_revenue)) +
geom_col(fill="orange", color="black") +
facet_wrap(~era) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(
title = "Revenue Distribution by Genre Across Eras",
x = "Genre",
y = "Average Revenue (INR)",
fill = "Genre"
)
srk_revenue_data <- bollywood_eras %>%
filter(lead_star == "shahrukh khan") %>%
drop_na(revenue_inr, era) %>%
group_by(era, .groups = 'keep') %>%
summarise(avg_revenue = mean(revenue_inr))
ggplot(srk_revenue_data, aes(x = era, y = avg_revenue, fill = era)) +
geom_col() +
theme_minimal() +
labs(
title = "Average Revenue of Movies Starring Shahrukh Khan Across Eras",
x = "Era",
y = "Average Revenue (INR)"
)
bollywood_eras %>%
filter(!is.na(revenue_inr), !is.na(era)) %>%
ggplot(aes(x=era, y=revenue_inr, fill=era)) +
geom_boxplot(outlier.color="red", outlier.shape=16, alpha=0.7) +
theme_minimal() +
scale_fill_manual(values=c("orange", "darkgreen")) +
labs(title="Revenue Distribution by Era", subtitle="Comparing old and new Bollywood movies",
x="Era", y="Revenue (INR)", fill="Era")
bollywood_eras %>%
filter(!is.na(revenue_inr), !is.na(era)) %>%
ggplot(aes(x=era, y=revenue_inr, fill=era)) +
geom_boxplot(outlier.color="black", outlier.shape=16, alpha=0.7) +
theme_minimal() +
scale_fill_manual(values=c("orange", "darkgreen")) +
labs(title="Revenue Distribution by Era", subtitle="Comparing old and new Bollywood movies",
x="Era", y="Revenue (INR)", fill="Era")
bollywood_eras %>%
filter(!is.na(revenue_inr), !is.na(era)) %>%
ggplot(aes(x=era, y=revenue_inr, fill=era)) +
geom_boxplot(outlier.color="black", outlier.shape=16, alpha=0.7) +
theme_minimal() +
scale_fill_manual(values=c("darkorange", "darkgreen")) +
labs(title="Revenue Distribution by Era", subtitle="Comparing old and new Bollywood movies",
x="Era", y="Revenue (INR)", fill="Era")
bollywood_eras %>%
filter(!is.na(revenue_inr), !is.na(era)) %>%
ggplot(aes(x=era, y=revenue_inr, fill=era)) +
geom_boxplot(outlier.color="black", outlier.shape=16, alpha=0.7) +
theme_minimal() +
scale_fill_manual(values=c("darkorange", "purple")) +
labs(title="Revenue Distribution by Era", subtitle="Comparing old and new Bollywood movies",
x="Era", y="Revenue (INR)", fill="Era")
bollywood_eras %>%
filter(!is.na(revenue_inr), !is.na(era)) %>%
ggplot(aes(x=era, y=revenue_inr, fill=era)) +
geom_boxplot(outlier.color="black", outlier.shape=16, alpha=0.7) +
theme_minimal() +
scale_fill_manual(values=c("darkblue", "purple")) +
labs(title="Revenue Distribution by Era", subtitle="Comparing old and new Bollywood movies",
x="Era", y="Revenue (INR)", fill="Era")
bollywood_eras %>%
filter(!is.na(number_of_screens), !is.na(revenue_inr), !is.na(era)) %>%
ggplot(aes(x=number_of_screens, y=revenue_inr, color=era)) +
geom_point(size=2, alpha=0.6) +
theme_minimal() +
scale_color_manual(values=c("darkblue", "purple")) +
labs(title="Number of Screens vs Revenue", subtitle="Does wider release mean higher revenue?",
x="Number of Screens", y="Revenue (INR)", color="Era")
bollywood_eras %>%
filter(!is.na(number_of_screens), !is.na(revenue_inr), !is.na(era)) %>%
ggplot(aes(x=number_of_screens, y=revenue_inr, color=era)) +
geom_point(size=2, alpha=0.6) +
theme_minimal() +
scale_color_manual(values=c("darkblue", "purple")) +
labs(title="Number of Screens vs Revenue",
x="Number of Screens", y="Revenue (INR)", color="Era")
ggplot(top_directors, aes(x = reorder(director, movie_count), y = movie_count, fill = era)) +
geom_col(alpha = 0.8, show.legend = TRUE) +
coord_flip() +
theme_minimal() +
scale_fill_manual(values = c("old" = "darkblue", "new" = "purple")) +
labs(
title = "Top 10 Most Popular Directors in Old and New Bollywood",
subtitle = "Based on the number of movies directed",
x = "Director",
y = "Number of Movies",
fill = "Era"
)
ggplot(top_directors, aes(x = reorder(director, movie_count), y = movie_count, fill = era)) +
geom_col(alpha = 0.8, show.legend = TRUE) +
coord_flip() +
theme_minimal() +
scale_fill_manual(values = c("old" = "darkorange", "new" = "darkgreen")) +
labs(
title = "Top 10 Most Popular Directors in Old and New Bollywood",
subtitle = "Based on the number of movies directed",
x = "Director",
y = "Number of Movies",
fill = "Era"
)
ggplot(top_directors, aes(x = reorder(director, movie_count), y = movie_count, fill = era)) +
geom_col(alpha = 0.8, show.legend = TRUE) +
coord_flip() +
theme_minimal() +
scale_fill_manual(values = c("old" = "darkorange", "new" = "red")) +
labs(
title = "Top 10 Most Popular Directors in Old and New Bollywood",
subtitle = "Based on the number of movies directed",
x = "Director",
y = "Number of Movies",
fill = "Era"
)
ggplot(top_directors, aes(x = reorder(director, movie_count), y = movie_count, fill = era)) +
geom_col(alpha = 0.8, show.legend = TRUE) +
coord_flip() +
theme_minimal() +
scale_fill_manual(values = c("old" = "darkorange", "new" = "purple")) +
labs(
title = "Top 10 Most Popular Directors in Old and New Bollywood",
subtitle = "Based on the number of movies directed",
x = "Director",
y = "Number of Movies",
fill = "Era"
)
ggplot(top_directors, aes(x = reorder(director, movie_count), y = movie_count, fill = era)) +
geom_col(alpha = 0.8, show.legend = TRUE) +
coord_flip() +
theme_minimal() +
scale_fill_manual(values = c("old" = "darkblue", "new" = "purple")) +
labs(
title = "Top 10 Most Popular Directors in Old and New Bollywood",
subtitle = "Based on the number of movies directed",
x = "Director",
y = "Number of Movies",
fill = "Era"
)
ggplot(top_directors, aes(x = reorder(director, movie_count), y = movie_count, fill = era)) +
geom_col(alpha = 0.8, show.legend = TRUE) +
coord_flip() +
theme_minimal() +
scale_fill_manual(values = c("old" = "darkblue", "new" = "purple")) +
labs(
title = "Top 10 Most Popular Directors in Old and New Bollywood",
x = "Director",
y = "Number of Movies",
fill = "Era"
)
new_actor_data <- bollywood_eras %>%
drop_na(new_actor, era) %>%
group_by(era, new_actor, .groups = 'keep') %>%
summarise(movie_count = n())
ggplot(new_actor_data, aes(x = era, y = movie_count, fill = new_actor)) +
geom_col(position = "dodge") +
scale_fill_manual(values = c("darkblue", "purple")) +
theme_minimal() +
labs(
title = "Comparison of New Actors Cast in Movies Across Eras",
x = "Era",
y = "Number of Movies",
fill = "New Actor Cast"
)
srk_revenue_data <- bollywood_eras %>%
filter(lead_star == "shahrukh khan") %>%
drop_na(revenue_inr, era) %>%
group_by(era, .groups = 'keep') %>%
summarise(avg_revenue = mean(revenue_inr))
ggplot(srk_revenue_data, aes(x = era, y = avg_revenue, fill = era)) +
geom_col() +
scale_fill_manual(values = c("darkblue", "purple")) +
theme_minimal() +
labs(
title = "Average Revenue of Movies Starring Shahrukh Khan Across Eras",
x = "Era",
y = "Average Revenue (INR)"
)
revenue_genre_era <- bollywood_eras %>%
drop_na(genre, revenue_inr, era) %>%
group_by(era, genre, .groups = 'keep') %>%
summarise(avg_revenue = mean(revenue_inr))
ggplot(revenue_genre_era, aes(x = genre, y = avg_revenue)) +
geom_col(fill="purple", color="darkblue") +
facet_wrap(~era) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(
title = "Revenue Distribution by Genre Across Eras",
x = "Genre",
y = "Average Revenue (INR)",
fill = "Genre"
)
revenue_genre_era <- bollywood_eras %>%
drop_na(genre, revenue_inr, era) %>%
group_by(era, genre, .groups = 'keep') %>%
summarise(avg_revenue = mean(revenue_inr))
ggplot(revenue_genre_era, aes(x = genre, y = avg_revenue)) +
geom_col(fill="darkblue", color="purple") +
facet_wrap(~era) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(
title = "Revenue Distribution by Genre Across Eras",
x = "Genre",
y = "Average Revenue (INR)",
fill = "Genre"
)
revenue_genre_era <- bollywood_eras %>%
drop_na(genre, revenue_inr, era) %>%
group_by(era, genre, .groups = 'keep') %>%
summarise(avg_revenue = mean(revenue_inr))
ggplot(revenue_genre_era, aes(x = genre, y = avg_revenue)) +
geom_col(fill="purple", color="darkblue") +
facet_wrap(~era) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(
title = "Revenue Distribution by Genre Across Eras",
x = "Genre",
y = "Average Revenue (INR)",
fill = "Genre"
)
bollywood_eras %>%
filter(!is.na(revenue_inr), !is.na(era)) %>%
ggplot(aes(x=era, y=revenue_inr, fill=era)) +
geom_boxplot(outlier.color="black", outlier.shape=16, alpha=0.7) +
theme_minimal() +
scale_fill_manual(values=c("darkblue", "purple")) +
labs(title="Revenue Distribution by Era",
x="Era", y="Revenue (INR)", fill="Era")
ggplot(top_directors, aes(x = reorder(director, movie_count), y = movie_count, fill = era)) +
geom_col(alpha = 0.8, show.legend = TRUE) +
coord_flip() +
theme_minimal() +
scale_fill_manual(values = c("old" = "darkblue", "new" = "purple")) +
labs(
title = "Most Popular Directors in Old and New Bollywood",
x = "Director",
y = "Number of Movies",
fill = "Era"
)
genre_popularity_data <- bollywood_eras %>%
filter(release_period == "holiday") %>%
drop_na(genre, era) %>%
group_by(era, genre, .groups = 'keep') %>%
summarise(movie_count = n())
ggplot(genre_popularity_data, aes(x = genre, y = movie_count, fill = era)) +
geom_col() +
scale_fill_manual(values = c("darkblue", "purple")) +
theme(axis.text.x = element_text(angle = 60))
theme_minimal() +
labs(
title = "Most Popular Genre During Holiday Releases Across Eras",
x = "Genre",
y = "Number of Movies",
fill = "Era"
)
genre_popularity_data <- bollywood_eras %>%
filter(release_period == "holiday") %>%
drop_na(genre, era) %>%
group_by(era, genre, .groups = 'keep') %>%
summarise(movie_count = n())
ggplot(genre_popularity_data, aes(x = genre, y = movie_count, fill = era)) +
geom_col() +
scale_fill_manual(values = c("darkblue", "purple")) +
theme(axis.text.x = element_text(angle = 60))
theme_minimal() +
labs(
title = "Most Popular Genre During Holiday Releases Across Eras",
x = "Genre",
y = "Number of Movies",
fill = "Era"
)
genre_popularity_data <- bollywood_eras %>%
filter(release_period == "holiday") %>%
drop_na(genre, era) %>%
group_by(era, genre, .groups = 'keep') %>%
summarise(movie_count = n())
ggplot(genre_popularity_data, aes(x = genre, y = movie_count, fill = era)) +
geom_col() +
scale_fill_manual(values = c("darkblue", "purple")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 60)) +  # Combine themes properly
labs(
title = "Most Popular Genre During Holiday Releases Across Eras",
x = "Genre",
y = "Number of Movies",
fill = "Era"
)
music_director_hit_flop <- bollywood_eras %>%
filter(music_director %in% c("a.r. rehman", "pritam", "vishal - shekhar", "anu malik")) %>%
group_by(era, music_director, .groups = 'keep') %>%
summarise(hit_flop_avg = mean(hit_flop, na.rm = TRUE))
ggplot(music_director_hit_flop, aes(x = reorder(music_director, hit_flop_avg), y = hit_flop_avg, fill = era)) +
geom_col(position = "dodge") +
theme_minimal() +
scale_fill_manual(values = c("darkblue", "purple")) +
labs(
title = "Highest Hit-Flop Average by Music Directors Across Eras",
x = "Music Director",
y = "Hit-Flop Average",
fill = "Era"
)
bollywood_eras %>%
filter(!is.na(genre), !is.na(era)) %>%
group_by(genre, era) %>%
summarise(count=n(), .groups='keep') %>%
ggplot(aes(x=reorder(genre, count), y=count, fill=era)) +
geom_col(position="dodge") +
theme_minimal() +
coord_flip() +
scale_fill_manual(values=c("darkblue", "purple")) +
labs(title="Number of Movies per Genre", subtitle="Comparing old and new Bollywood genres",
x="Genre", y="Count", fill="Era")
revenue_genre_era <- bollywood_eras %>%
drop_na(genre, revenue_inr, era) %>%
group_by(era, genre, .groups = 'keep') %>%
summarise(avg_revenue = mean(revenue_inr))
ggplot(revenue_genre_era, aes(x = genre, y = avg_revenue)) +
geom_col(fill="purple", color="darkblue") +
facet_wrap(~era) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(
title = "Revenue Distribution by Genre Across Eras",
x = "Genre",
y = "Average Revenue (INR)",
fill = "Genre"
)
>>>>>>> d0bc5e36b7b76bd19111403ec44f0c3c9aba18c5
library(shiny)
ui <- fluidPage(
selectInput("y",
"Select Y Variable",
<<<<<<< HEAD
choices = c("avg_hit_rating", "avg_num_screens", "avg_revenue", "avg_budget"),
=======
choices = c("hit_flop", "number_of_screens", "revenue_inr", "budget_inr"),
>>>>>>> d0bc5e36b7b76bd19111403ec44f0c3c9aba18c5
selected = "hit_flop"),
plotOutput("plot", width="500px", height="400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
<<<<<<< HEAD
by_genre %>%
ggplot(aes_string(x="genre", y=input$y))+
geom_col(fill="skyblue")+
ggtitle(paste(input$y, "by genre")+
theme(plot.title = element_text(size = 16))
})
library(shiny)
ui <- fluidPage(
selectInput("y",
"Select Y Variable",
choices = c("avg_hit_rating", "avg_num_screens", "avg_revenue", "avg_budget"),
selected = "hit_flop"),
plotOutput("plot", width="500px", height="400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
by_genre %>%
ggplot(aes_string(x="genre", y=input$y))+
geom_col(fill="skyblue")+
ggtitle(paste(input$y, "by genre"))+
theme(plot.title = element_text(size = 16))
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
selectInput("y",
"Select Y Variable",
choices = c("avg_hit_rating", "avg_num_screens", "avg_revenue", "avg_budget"),
selected = "hit_flop"),
plotOutput("plot", width="500px", height="400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
by_genre %>%
ggplot(aes_string(x="genre", y=input$y))+
geom_col(fill="skyblue")+
ggtitle(paste(input$y, "by genre"))+
theme(plot.title = element_text(size = 16))+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
selectInput("y",
"Select Y Variable",
choices = c("avg_hit_rating", "avg_num_screens", "avg_revenue", "avg_budget"),
selected = "hit_flop"),
plotOutput("plot", width="500px", height="400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
by_genre %>%
ggplot(aes_string(x="genre", y=input$y))+
geom_col(fill="skyblue")+
ggtitle(paste(input$y, "by genre"))+
theme(plot.title = element_text(size = 16))+
theme(axis.text.x = element_text(angle = 45, hjust = 1, size=12))
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
selectInput("y",
"Select Y Variable",
choices = c("avg_hit_rating", "avg_num_screens", "avg_revenue", "avg_budget"),
selected = "hit_flop"),
plotOutput("plot", width="500px", height="400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
by_genre %>%
ggplot(aes_string(x="genre", y=input$y))+
geom_col(fill="skyblue")+
ggtitle(paste(input$y, "by genre"))+
theme(plot.title = element_text(size = 16))+
theme(axis.text.x = element_text(angle = 45, hjust = 1, size=8))
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
selectInput("y",
"Select Y Variable",
choices = c("avg_hit_rating", "avg_num_screens", "avg_revenue", "avg_budget"),
selected = "hit_flop"),
plotOutput("plot", width="500px", height="400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
by_genre %>%
ggplot(aes_string(x="genre", y=input$y))+
geom_col(fill="skyblue")+
ggtitle(paste(input$y, "by genre"))+
theme(plot.title = element_text(size = 16, hjust=0.5))+
theme(axis.text.x = element_text(angle = 45, hjust = 1, size=9))
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
selectInput("y",
"Select Y Variable",
choices = c("avg_hit_rating", "avg_num_screens", "avg_revenue", "avg_budget"),
selected = "hit_flop"),
plotOutput("plot", width="500px", height="400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
by_genre %>%
ggplot(aes_string(x="genre", y=input$y))+
geom_col(fill="skyblue")+
ggtitle(paste(input$y, "by genre"))+
theme(plot.title = element_text(size = 16, hjust=0.5))+
theme(axis.text.x = element_text(angle = 45, hjust = 1, size=9),
axis.title.x = element_text(size=12))
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
selectInput("y",
"Select Y Variable",
choices = c("avg_hit_rating", "avg_num_screens", "avg_revenue", "avg_budget"),
selected = "hit_flop"),
plotOutput("plot", width="500px", height="400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
by_genre %>%
ggplot(aes_string(x="genre", y=input$y))+
geom_col(fill="skyblue", color="black")+
ggtitle(paste(input$y, "by genre"))+
theme(plot.title = element_text(size = 16, hjust=0.5))+
theme(axis.text.x = element_text(angle = 45, hjust = 1, size=9),
axis.title.x = element_text(size=12),
axis.title.y = element_text(size=12))
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
selectInput("y",
"Select Y Variable",
choices = c("avg_hit_rating", "avg_num_screens", "avg_revenue", "avg_budget"),
selected = "hit_flop"),
plotOutput("plot", width="500px", height="400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
by_genre %>%
ggplot(aes_string(x="genre", y=input$y))+
geom_col(fill="skyblue", color="black")+
ggtitle(paste(input$y, "by genre"))+
theme(plot.title = element_text(size = 16, hjust=0.5))+
theme(axis.text.x = element_text(angle = 45, hjust = 1, size=9),
axis.title.x = element_text(size=12),
axis.title.y = element_text(size=12))
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(titlePanel("Bollywood Genres"),
selectInput("y",
"Select Y Variable",
choices = c("avg_hit_rating", "avg_num_screens", "avg_revenue", "avg_budget"),
selected = "hit_flop"),
plotOutput("plot", width="500px", height="400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
by_genre %>%
ggplot(aes_string(x="genre", y=input$y))+
geom_col(fill="skyblue", color="black")+
ggtitle(paste(input$y, "by genre"))+
theme(plot.title = element_text(size = 16, hjust=0.5))+
theme(axis.text.x = element_text(angle = 45, hjust = 1, size=9),
axis.title.x = element_text(size=12),
axis.title.y = element_text(size=12))
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(titlePanel("Bollywood Genres"),
selectInput("y",
"Select Y Variable",
choices = c("avg_hit_rating", "avg_num_screens", "avg_revenue", "avg_budget"),
selected = "hit_flop"),
plotOutput("plot", width="500px", height="400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
by_genre %>%
ggplot(aes_string(x="genre", y=input$y))+
geom_col(fill="skyblue", color="black")+
ggtitle(paste(input$y, "by genre"))+
theme(plot.title = element_text(size = 16, hjust=0.5))+
theme(axis.text.x = element_text(angle = 45, hjust = 1, size=9),
axis.title.x = element_text(size=12),
axis.title.y = element_text(size=12))
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(titlePanel("Bollywood Genres"),
selectInput("y",
"Select Y Variable",
choices = c("avg_hit_rating", "avg_num_screens", "avg_revenue", "avg_budget"),
selected = "hit_flop"),
plotOutput("plot", width="500px", height="400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
by_genre %>%
ggplot(aes_string(x="genre", y=input$y))+
geom_col(fill="skyblue", color="black")+
ggtitle(paste(input$y,"by genre"))+
theme(plot.title = element_text(size = 16, hjust=0.5))+
theme(axis.text.x = element_text(angle = 45, hjust = 1, size=9),
axis.title.x = element_text(size=12),
axis.title.y = element_text(size=12))
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
selectInput("y",
"Select Y Variable",
choices = c("avg_hit_rating", "avg_num_screens", "avg_revenue", "avg_budget"),
selected = "hit_flop"),
plotOutput("plot", width="500px", height="400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
by_genre %>%
ggplot(aes_string(x="genre", y=input$y))+
geom_col(fill="skyblue", color="black")+
ggtitle(paste(input$y, "by genre"))+
theme(plot.title = element_text(size = 16, hjust=0.5))+
theme(axis.text.x = element_text(angle = 45, hjust = 1, size=9),
axis.title.x = element_text(size=12),
axis.title.y = element_text(size=12))
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
selectInput("y",
"Select Y Variable",
choices = c("avg_hit_rating", "avg_num_screens", "avg_revenue", "avg_budget"),
selected = "avg_hit_rating"),
plotOutput("plot", width="500px", height="400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
by_genre %>%
ggplot(aes_string(x="genre", y=input$y))+
geom_col(fill="skyblue", color="black")+
ggtitle(paste(input$y, "by genre"))+
theme(plot.title = element_text(size = 16, hjust=0.5))+
theme(axis.text.x = element_text(angle = 45, hjust = 1, size=9),
axis.title.x = element_text(size=12),
axis.title.y = element_text(size=12))
})
}
shinyApp(ui, server)
options(scipen=999) #turning off scientific notation
library(tidyverse)
library(janitor)
library(naniar)
library(ggplot2)
library(RColorBrewer)
movies1 <- read_csv("movies1.csv") %>%
clean_names() %>%
rename(title=movie_name) %>%
mutate(across(where(is.character), tolower)) #changing all characters to lowercase
movies2 <- read_csv("bollywood_hits.csv") %>%
clean_names() %>%
mutate(across(where(is.character), tolower))
movie_join <- inner_join(movies1, movies2, by="title")
bollywood <- movie_join %>%
select(-genre.y, -actors, -directors, -imdb_id) %>% #removing duplicate columns
rename(genre=genre.x) %>%
separate(release_date, into=c("date", "month", "year"), sep=" ") %>% #separate the date column
replace_with_na_all(condition = ~.x == "n/a") %>%
select(-release_year) #removing duplicate year column
by_genre <- bollywood %>%
group_by(genre) %>%
summarize(avg_hit_rating=mean(hit_flop), avg_num_screens=mean(number_of_screens), avg_revenue=mean(revenue_inr), avg_budget=mean(budget_inr))
library(shiny)
ui <- fluidPage(
selectInput("y",
"Select Y Variable",
choices = c("avg_hit_rating", "avg_num_screens", "avg_revenue", "avg_budget"),
selected = "avg_hit_rating"),
plotOutput("plot", width="500px", height="400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
by_genre %>%
ggplot(aes_string(x="genre", y=input$y))+
geom_col(fill="skyblue", color="black")+
ggtitle(paste(input$y, "by genre"))+
theme(plot.title = element_text(size = 16, hjust=0.5))+
theme(axis.text.x = element_text(angle = 45, hjust = 1, size=9),
axis.title.x = element_text(size=12),
axis.title.y = element_text(size=12))
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(titlePanel("Bollywood Genres"),
selectInput("y",
"Select Y Variable",
choices = c("avg_hit_rating", "avg_num_screens", "avg_revenue", "avg_budget"),
selected = "avg_hit_rating"),
plotOutput("plot", width="500px", height="400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
by_genre %>%
ggplot(aes_string(x="genre", y=input$y))+
geom_col(fill="skyblue", color="black")+
ggtitle(paste(input$y, "by genre"))+
theme(plot.title = element_text(size = 16, hjust=0.5))+
theme(axis.text.x = element_text(angle = 45, hjust = 1, size=9),
axis.title.x = element_text(size=12),
axis.title.y = element_text(size=12))
})
}
shinyApp(ui, server)
by_genre <- bollywood %>%
group_by(genre) %>%
summarize(avg_hit_rating=mean(hit_flop), avg_num_screens=mean(number_of_screens), avg_revenue_inr=mean(revenue_inr), avg_budget_inr=mean(budget_inr))
library(shiny)
ui <- fluidPage(titlePanel("Bollywood Genres"),
selectInput("y",
"Select Y Variable",
choices = c("avg_hit_rating", "avg_num_screens", "avg_revenue_inr", "avg_budget_inr"),
selected = "avg_hit_rating"),
plotOutput("plot", width="500px", height="400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
by_genre %>%
ggplot(aes_string(x="genre", y=input$y))+
geom_col(fill="skyblue", color="black")+
ggtitle(paste(input$y, "by genre"))+
theme(plot.title = element_text(size = 16, hjust=0.5))+
theme(axis.text.x = element_text(angle = 45, hjust = 1, size=9),
axis.title.x = element_text(size=12),
axis.title.y = element_text(size=12))
})
}
shinyApp(ui, server)
bollywood <- bollywood %>%
mutate(success = case_when(
hit_flop < 7 ~ "flop",
hit_flop >= 7 ~ "hit"))
bollywood %>%
group_by(success) %>%
summarize(hit_count = n()) %>%
ungroup()
bollywood %>%
filter(!is.na(whether_remake)) %>%
group_by(whether_remake, success) %>%
summarize(count = n(), .groups = "drop")
bollywood %>%
filter(!is.na(whether_remake)) %>%
group_by(whether_remake, success) %>%
summarize(count = n(), .groups = "drop") %>%
ggplot(aes(x=success, y=count, fill=whether_remake))+
geom_col()+
labs(title="Comparison of Hits and Flops by Whether Remake")
genre_summary <- bollywood %>%
group_by(genre, hit_flop) %>%
summarize(count = n(), .groups = "drop")
ggplot(genre_summary, aes(x = genre, y = count, fill = hit_flop)) +
geom_bar(stat = "identity", position = "dodge") +  # Dodge position to show bars side by side
labs(
title = "Comparison of Hits and Flops by Genre",
x = "Genre",
y = "Number of Movies",
fill = "Hit/Flop Status"
) +
theme_minimal() +
coord_flip()
actor_summary <- bollywood %>%
filter(lead_star %in% c("aamir bashir", "aasad mirza", "abhay deol", "abhishek bachchan"))%>%
group_by(hit_flop, lead_star) %>%
summarize(count = n(), .groups = "keep") %>%
arrange(desc(count))
actor_summary
bollywood <- bollywood %>%
mutate(release_period = as.factor(release_period))
success_by_period <- bollywood %>%
group_by(release_period, hit_flop) %>%
summarize(count = n(), .groups = "drop")
success_by_period
actor_summary <- bollywood %>%
filter(lead_star %in% c("abhay deol", "aishwarya rai")) %>%
group_by(hit_flop, lead_star) %>%
summarize(count = n(), .groups = "keep")
ggplot(actor_summary, aes(x = hit_flop, y = count, fill = lead_star)) +
geom_bar(stat = "identity", position = "dodge") +
labs(x = "Lead Star", y = "Movie Count", fill = "Lead Star") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
success_by_period <- bollywood %>%
filter(lead_star %in% c("aamir bashir", "aasad mirza", "abhay deol", "abhishek bachchan")) %>%
group_by(release_period, hit_flop) %>%
summarize(count = n(), .groups = "drop")
average_success_by_period <- success_by_period %>%
group_by(release_period) %>%
summarize(average_count = mean(count), .groups = "drop")
average_success_by_period
library(tidyverse)
library(janitor)
library(naniar)
library(ggplot2)
library(RColorBrewer)
options(scipen=999) #turning off scientific notation
movies1 <- read_csv("movies1.csv") %>%
clean_names() %>%
rename(title=movie_name) %>%
mutate(across(where(is.character), tolower)) #changing all characters to lowercase
movies2 <- read_csv("bollywood_hits.csv") %>%
clean_names() %>%
mutate(across(where(is.character), tolower))
movie_join <- inner_join(movies1, movies2, by="title")
bollywood <- movie_join %>%
select(-genre.y, -actors, -directors, -imdb_id) %>% #removing duplicate columns
rename(genre=genre.x) %>%
separate(release_date, into=c("date", "month", "year"), sep=" ") %>% #separate the date column
replace_with_na_all(condition = ~.x == "n/a") %>%
select(-release_year) #removing duplicate year column
bollywood <- bollywood %>%
mutate(success = case_when(
hit_flop < 7 ~ "flop",
hit_flop >= 7 ~ "hit"))
bollywood %>%
group_by(success) %>%
summarize(hit_count = n()) %>%
ungroup()
bollywood %>%
filter(!is.na(whether_remake)) %>%
group_by(whether_remake, success) %>%
summarize(count = n(), .groups = "drop")
bollywood %>%
filter(!is.na(whether_remake)) %>%
group_by(whether_remake, success) %>%
summarize(count = n(), .groups = "drop") %>%
ggplot(aes(x=success, y=count, fill=whether_remake))+
geom_col()+
labs(title="Comparison of Hits and Flops by Whether Remake")
genre_summary <- bollywood %>%
group_by(genre, hit_flop) %>%
summarize(count = n(), .groups = "drop")
ggplot(genre_summary, aes(x = genre, y = count, fill = hit_flop)) +
geom_bar(stat = "identity", position = "dodge") +  # Dodge position to show bars side by side
labs(
title = "Comparison of Hits and Flops by Genre",
x = "Genre",
y = "Number of Movies",
fill = "Hit/Flop Status"
) +
theme_minimal() +
coord_flip()
actor_summary <- bollywood %>%
filter(lead_star %in% c("aamir bashir", "aasad mirza", "abhay deol", "abhishek bachchan"))%>%
group_by(hit_flop, lead_star) %>%
summarize(count = n(), .groups = "keep") %>%
arrange(desc(count))
actor_summary
bollywood <- bollywood %>%
mutate(release_period = as.factor(release_period))
success_by_period <- bollywood %>%
group_by(release_period, hit_flop) %>%
summarize(count = n(), .groups = "drop")
success_by_period
actor_summary <- bollywood %>%
filter(lead_star %in% c("abhay deol", "aishwarya rai")) %>%
group_by(hit_flop, lead_star) %>%
summarize(count = n(), .groups = "keep")
ggplot(actor_summary, aes(x = hit_flop, y = count, fill = lead_star)) +
geom_bar(stat = "identity", position = "dodge") +
labs(x = "Lead Star", y = "Movie Count", fill = "Lead Star") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
success_by_period <- bollywood %>%
filter(lead_star %in% c("aamir bashir", "aasad mirza", "abhay deol", "abhishek bachchan")) %>%
group_by(release_period, hit_flop) %>%
summarize(count = n(), .groups = "drop")
average_success_by_period <- success_by_period %>%
group_by(release_period) %>%
summarize(average_count = mean(count), .groups = "drop")
average_success_by_period
=======
})
}
shinyApp(ui, server)
revenue_genre_era <- bollywood_eras %>%
drop_na(genre, revenue_inr, era) %>%
group_by(era, genre, .groups = 'keep') %>%
summarise(avg_revenue = mean(revenue_inr))
ggplot(revenue_genre_era, aes(x = genre, y = avg_revenue)) +
geom_col(fill="purple", color="darkblue") +
facet_wrap(~era) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(
title = "Revenue Distribution by Genre Across Eras",
x = "Genre",
y = "Average Revenue (INR)",
fill = "Genre"
)
>>>>>>> d0bc5e36b7b76bd19111403ec44f0c3c9aba18c5
