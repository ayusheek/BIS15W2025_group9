theme(plot.title = element_text(size = 16))
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
selectInput("y",
"Select Y Variable",
choices = c("avg_hit_rating", "avg_num_screens", "avg_revenue", "avg_budget"),
selected = "hit_flop"),
plotOutput("plot", width="500px", height="400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
by_genre %>%
ggplot(aes_string(x="genre", y=input$y))+
geom_col(fill="skyblue")+
ggtitle(paste(input$y, "by genre")+
theme(plot.title = element_text(size = 16))
})
library(shiny)
ui <- fluidPage(
selectInput("y",
"Select Y Variable",
choices = c("avg_hit_rating", "avg_num_screens", "avg_revenue", "avg_budget"),
selected = "hit_flop"),
plotOutput("plot", width="500px", height="400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
by_genre %>%
ggplot(aes_string(x="genre", y=input$y))+
geom_col(fill="skyblue")+
ggtitle(paste(input$y, "by genre"))+
theme(plot.title = element_text(size = 16))
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
selectInput("y",
"Select Y Variable",
choices = c("avg_hit_rating", "avg_num_screens", "avg_revenue", "avg_budget"),
selected = "hit_flop"),
plotOutput("plot", width="500px", height="400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
by_genre %>%
ggplot(aes_string(x="genre", y=input$y))+
geom_col(fill="skyblue")+
ggtitle(paste(input$y, "by genre"))+
theme(plot.title = element_text(size = 16))+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
selectInput("y",
"Select Y Variable",
choices = c("avg_hit_rating", "avg_num_screens", "avg_revenue", "avg_budget"),
selected = "hit_flop"),
plotOutput("plot", width="500px", height="400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
by_genre %>%
ggplot(aes_string(x="genre", y=input$y))+
geom_col(fill="skyblue")+
ggtitle(paste(input$y, "by genre"))+
theme(plot.title = element_text(size = 16))+
theme(axis.text.x = element_text(angle = 45, hjust = 1, size=12))
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
selectInput("y",
"Select Y Variable",
choices = c("avg_hit_rating", "avg_num_screens", "avg_revenue", "avg_budget"),
selected = "hit_flop"),
plotOutput("plot", width="500px", height="400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
by_genre %>%
ggplot(aes_string(x="genre", y=input$y))+
geom_col(fill="skyblue")+
ggtitle(paste(input$y, "by genre"))+
theme(plot.title = element_text(size = 16))+
theme(axis.text.x = element_text(angle = 45, hjust = 1, size=8))
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
selectInput("y",
"Select Y Variable",
choices = c("avg_hit_rating", "avg_num_screens", "avg_revenue", "avg_budget"),
selected = "hit_flop"),
plotOutput("plot", width="500px", height="400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
by_genre %>%
ggplot(aes_string(x="genre", y=input$y))+
geom_col(fill="skyblue")+
ggtitle(paste(input$y, "by genre"))+
theme(plot.title = element_text(size = 16, hjust=0.5))+
theme(axis.text.x = element_text(angle = 45, hjust = 1, size=9))
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
selectInput("y",
"Select Y Variable",
choices = c("avg_hit_rating", "avg_num_screens", "avg_revenue", "avg_budget"),
selected = "hit_flop"),
plotOutput("plot", width="500px", height="400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
by_genre %>%
ggplot(aes_string(x="genre", y=input$y))+
geom_col(fill="skyblue")+
ggtitle(paste(input$y, "by genre"))+
theme(plot.title = element_text(size = 16, hjust=0.5))+
theme(axis.text.x = element_text(angle = 45, hjust = 1, size=9),
axis.title.x = element_text(size=12))
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
selectInput("y",
"Select Y Variable",
choices = c("avg_hit_rating", "avg_num_screens", "avg_revenue", "avg_budget"),
selected = "hit_flop"),
plotOutput("plot", width="500px", height="400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
by_genre %>%
ggplot(aes_string(x="genre", y=input$y))+
geom_col(fill="skyblue", color="black")+
ggtitle(paste(input$y, "by genre"))+
theme(plot.title = element_text(size = 16, hjust=0.5))+
theme(axis.text.x = element_text(angle = 45, hjust = 1, size=9),
axis.title.x = element_text(size=12),
axis.title.y = element_text(size=12))
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
selectInput("y",
"Select Y Variable",
choices = c("avg_hit_rating", "avg_num_screens", "avg_revenue", "avg_budget"),
selected = "hit_flop"),
plotOutput("plot", width="500px", height="400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
by_genre %>%
ggplot(aes_string(x="genre", y=input$y))+
geom_col(fill="skyblue", color="black")+
ggtitle(paste(input$y, "by genre"))+
theme(plot.title = element_text(size = 16, hjust=0.5))+
theme(axis.text.x = element_text(angle = 45, hjust = 1, size=9),
axis.title.x = element_text(size=12),
axis.title.y = element_text(size=12))
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(titlePanel("Bollywood Genres"),
selectInput("y",
"Select Y Variable",
choices = c("avg_hit_rating", "avg_num_screens", "avg_revenue", "avg_budget"),
selected = "hit_flop"),
plotOutput("plot", width="500px", height="400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
by_genre %>%
ggplot(aes_string(x="genre", y=input$y))+
geom_col(fill="skyblue", color="black")+
ggtitle(paste(input$y, "by genre"))+
theme(plot.title = element_text(size = 16, hjust=0.5))+
theme(axis.text.x = element_text(angle = 45, hjust = 1, size=9),
axis.title.x = element_text(size=12),
axis.title.y = element_text(size=12))
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(titlePanel("Bollywood Genres"),
selectInput("y",
"Select Y Variable",
choices = c("avg_hit_rating", "avg_num_screens", "avg_revenue", "avg_budget"),
selected = "hit_flop"),
plotOutput("plot", width="500px", height="400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
by_genre %>%
ggplot(aes_string(x="genre", y=input$y))+
geom_col(fill="skyblue", color="black")+
ggtitle(paste(input$y, "by genre"))+
theme(plot.title = element_text(size = 16, hjust=0.5))+
theme(axis.text.x = element_text(angle = 45, hjust = 1, size=9),
axis.title.x = element_text(size=12),
axis.title.y = element_text(size=12))
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(titlePanel("Bollywood Genres"),
selectInput("y",
"Select Y Variable",
choices = c("avg_hit_rating", "avg_num_screens", "avg_revenue", "avg_budget"),
selected = "hit_flop"),
plotOutput("plot", width="500px", height="400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
by_genre %>%
ggplot(aes_string(x="genre", y=input$y))+
geom_col(fill="skyblue", color="black")+
ggtitle(paste(input$y,"by genre"))+
theme(plot.title = element_text(size = 16, hjust=0.5))+
theme(axis.text.x = element_text(angle = 45, hjust = 1, size=9),
axis.title.x = element_text(size=12),
axis.title.y = element_text(size=12))
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
selectInput("y",
"Select Y Variable",
choices = c("avg_hit_rating", "avg_num_screens", "avg_revenue", "avg_budget"),
selected = "hit_flop"),
plotOutput("plot", width="500px", height="400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
by_genre %>%
ggplot(aes_string(x="genre", y=input$y))+
geom_col(fill="skyblue", color="black")+
ggtitle(paste(input$y, "by genre"))+
theme(plot.title = element_text(size = 16, hjust=0.5))+
theme(axis.text.x = element_text(angle = 45, hjust = 1, size=9),
axis.title.x = element_text(size=12),
axis.title.y = element_text(size=12))
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
selectInput("y",
"Select Y Variable",
choices = c("avg_hit_rating", "avg_num_screens", "avg_revenue", "avg_budget"),
selected = "avg_hit_rating"),
plotOutput("plot", width="500px", height="400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
by_genre %>%
ggplot(aes_string(x="genre", y=input$y))+
geom_col(fill="skyblue", color="black")+
ggtitle(paste(input$y, "by genre"))+
theme(plot.title = element_text(size = 16, hjust=0.5))+
theme(axis.text.x = element_text(angle = 45, hjust = 1, size=9),
axis.title.x = element_text(size=12),
axis.title.y = element_text(size=12))
})
}
shinyApp(ui, server)
options(scipen=999) #turning off scientific notation
library(tidyverse)
library(janitor)
library(naniar)
library(ggplot2)
library(RColorBrewer)
movies1 <- read_csv("movies1.csv") %>%
clean_names() %>%
rename(title=movie_name) %>%
mutate(across(where(is.character), tolower)) #changing all characters to lowercase
movies2 <- read_csv("bollywood_hits.csv") %>%
clean_names() %>%
mutate(across(where(is.character), tolower))
movie_join <- inner_join(movies1, movies2, by="title")
bollywood <- movie_join %>%
select(-genre.y, -actors, -directors, -imdb_id) %>% #removing duplicate columns
rename(genre=genre.x) %>%
separate(release_date, into=c("date", "month", "year"), sep=" ") %>% #separate the date column
replace_with_na_all(condition = ~.x == "n/a") %>%
select(-release_year) #removing duplicate year column
by_genre <- bollywood %>%
group_by(genre) %>%
summarize(avg_hit_rating=mean(hit_flop), avg_num_screens=mean(number_of_screens), avg_revenue=mean(revenue_inr), avg_budget=mean(budget_inr))
library(shiny)
ui <- fluidPage(
selectInput("y",
"Select Y Variable",
choices = c("avg_hit_rating", "avg_num_screens", "avg_revenue", "avg_budget"),
selected = "avg_hit_rating"),
plotOutput("plot", width="500px", height="400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
by_genre %>%
ggplot(aes_string(x="genre", y=input$y))+
geom_col(fill="skyblue", color="black")+
ggtitle(paste(input$y, "by genre"))+
theme(plot.title = element_text(size = 16, hjust=0.5))+
theme(axis.text.x = element_text(angle = 45, hjust = 1, size=9),
axis.title.x = element_text(size=12),
axis.title.y = element_text(size=12))
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(titlePanel("Bollywood Genres"),
selectInput("y",
"Select Y Variable",
choices = c("avg_hit_rating", "avg_num_screens", "avg_revenue", "avg_budget"),
selected = "avg_hit_rating"),
plotOutput("plot", width="500px", height="400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
by_genre %>%
ggplot(aes_string(x="genre", y=input$y))+
geom_col(fill="skyblue", color="black")+
ggtitle(paste(input$y, "by genre"))+
theme(plot.title = element_text(size = 16, hjust=0.5))+
theme(axis.text.x = element_text(angle = 45, hjust = 1, size=9),
axis.title.x = element_text(size=12),
axis.title.y = element_text(size=12))
})
}
shinyApp(ui, server)
by_genre <- bollywood %>%
group_by(genre) %>%
summarize(avg_hit_rating=mean(hit_flop), avg_num_screens=mean(number_of_screens), avg_revenue_inr=mean(revenue_inr), avg_budget_inr=mean(budget_inr))
library(shiny)
ui <- fluidPage(titlePanel("Bollywood Genres"),
selectInput("y",
"Select Y Variable",
choices = c("avg_hit_rating", "avg_num_screens", "avg_revenue_inr", "avg_budget_inr"),
selected = "avg_hit_rating"),
plotOutput("plot", width="500px", height="400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
by_genre %>%
ggplot(aes_string(x="genre", y=input$y))+
geom_col(fill="skyblue", color="black")+
ggtitle(paste(input$y, "by genre"))+
theme(plot.title = element_text(size = 16, hjust=0.5))+
theme(axis.text.x = element_text(angle = 45, hjust = 1, size=9),
axis.title.x = element_text(size=12),
axis.title.y = element_text(size=12))
})
}
shinyApp(ui, server)
bollywood <- bollywood %>%
mutate(success = case_when(
hit_flop < 7 ~ "flop",
hit_flop >= 7 ~ "hit"))
bollywood %>%
group_by(success) %>%
summarize(hit_count = n()) %>%
ungroup()
bollywood %>%
filter(!is.na(whether_remake)) %>%
group_by(whether_remake, success) %>%
summarize(count = n(), .groups = "drop")
bollywood %>%
filter(!is.na(whether_remake)) %>%
group_by(whether_remake, success) %>%
summarize(count = n(), .groups = "drop") %>%
ggplot(aes(x=success, y=count, fill=whether_remake))+
geom_col()+
labs(title="Comparison of Hits and Flops by Whether Remake")
genre_summary <- bollywood %>%
group_by(genre, hit_flop) %>%
summarize(count = n(), .groups = "drop")
ggplot(genre_summary, aes(x = genre, y = count, fill = hit_flop)) +
geom_bar(stat = "identity", position = "dodge") +  # Dodge position to show bars side by side
labs(
title = "Comparison of Hits and Flops by Genre",
x = "Genre",
y = "Number of Movies",
fill = "Hit/Flop Status"
) +
theme_minimal() +
coord_flip()
actor_summary <- bollywood %>%
filter(lead_star %in% c("aamir bashir", "aasad mirza", "abhay deol", "abhishek bachchan"))%>%
group_by(hit_flop, lead_star) %>%
summarize(count = n(), .groups = "keep") %>%
arrange(desc(count))
actor_summary
bollywood <- bollywood %>%
mutate(release_period = as.factor(release_period))
success_by_period <- bollywood %>%
group_by(release_period, hit_flop) %>%
summarize(count = n(), .groups = "drop")
success_by_period
actor_summary <- bollywood %>%
filter(lead_star %in% c("abhay deol", "aishwarya rai")) %>%
group_by(hit_flop, lead_star) %>%
summarize(count = n(), .groups = "keep")
ggplot(actor_summary, aes(x = hit_flop, y = count, fill = lead_star)) +
geom_bar(stat = "identity", position = "dodge") +
labs(x = "Lead Star", y = "Movie Count", fill = "Lead Star") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
success_by_period <- bollywood %>%
filter(lead_star %in% c("aamir bashir", "aasad mirza", "abhay deol", "abhishek bachchan")) %>%
group_by(release_period, hit_flop) %>%
summarize(count = n(), .groups = "drop")
average_success_by_period <- success_by_period %>%
group_by(release_period) %>%
summarize(average_count = mean(count), .groups = "drop")
average_success_by_period
library(tidyverse)
library(janitor)
library(naniar)
library(ggplot2)
library(RColorBrewer)
options(scipen=999) #turning off scientific notation
movies1 <- read_csv("movies1.csv") %>%
clean_names() %>%
rename(title=movie_name) %>%
mutate(across(where(is.character), tolower)) #changing all characters to lowercase
movies2 <- read_csv("bollywood_hits.csv") %>%
clean_names() %>%
mutate(across(where(is.character), tolower))
movie_join <- inner_join(movies1, movies2, by="title")
bollywood <- movie_join %>%
select(-genre.y, -actors, -directors, -imdb_id) %>% #removing duplicate columns
rename(genre=genre.x) %>%
separate(release_date, into=c("date", "month", "year"), sep=" ") %>% #separate the date column
replace_with_na_all(condition = ~.x == "n/a") %>%
select(-release_year) #removing duplicate year column
bollywood <- bollywood %>%
mutate(success = case_when(
hit_flop < 7 ~ "flop",
hit_flop >= 7 ~ "hit"))
bollywood %>%
group_by(success) %>%
summarize(hit_count = n()) %>%
ungroup()
bollywood %>%
filter(!is.na(whether_remake)) %>%
group_by(whether_remake, success) %>%
summarize(count = n(), .groups = "drop")
bollywood %>%
filter(!is.na(whether_remake)) %>%
group_by(whether_remake, success) %>%
summarize(count = n(), .groups = "drop") %>%
ggplot(aes(x=success, y=count, fill=whether_remake))+
geom_col()+
labs(title="Comparison of Hits and Flops by Whether Remake")
genre_summary <- bollywood %>%
group_by(genre, hit_flop) %>%
summarize(count = n(), .groups = "drop")
ggplot(genre_summary, aes(x = genre, y = count, fill = hit_flop)) +
geom_bar(stat = "identity", position = "dodge") +  # Dodge position to show bars side by side
labs(
title = "Comparison of Hits and Flops by Genre",
x = "Genre",
y = "Number of Movies",
fill = "Hit/Flop Status"
) +
theme_minimal() +
coord_flip()
actor_summary <- bollywood %>%
filter(lead_star %in% c("aamir bashir", "aasad mirza", "abhay deol", "abhishek bachchan"))%>%
group_by(hit_flop, lead_star) %>%
summarize(count = n(), .groups = "keep") %>%
arrange(desc(count))
actor_summary
bollywood <- bollywood %>%
mutate(release_period = as.factor(release_period))
success_by_period <- bollywood %>%
group_by(release_period, hit_flop) %>%
summarize(count = n(), .groups = "drop")
success_by_period
actor_summary <- bollywood %>%
filter(lead_star %in% c("abhay deol", "aishwarya rai")) %>%
group_by(hit_flop, lead_star) %>%
summarize(count = n(), .groups = "keep")
ggplot(actor_summary, aes(x = hit_flop, y = count, fill = lead_star)) +
geom_bar(stat = "identity", position = "dodge") +
labs(x = "Lead Star", y = "Movie Count", fill = "Lead Star") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
success_by_period <- bollywood %>%
filter(lead_star %in% c("aamir bashir", "aasad mirza", "abhay deol", "abhishek bachchan")) %>%
group_by(release_period, hit_flop) %>%
summarize(count = n(), .groups = "drop")
average_success_by_period <- success_by_period %>%
group_by(release_period) %>%
summarize(average_count = mean(count), .groups = "drop")
average_success_by_period
